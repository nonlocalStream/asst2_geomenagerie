uniform int outputID;
uniform sampler2D envmap;
uniform vec3 eyePos;
varying vec3 normal;
varying vec3 vertex;

#define PI 3.1415926

vec3 shadeDiffuseFromEye();

vec3 shadePhong(vec3 lightPos);

vec3 shadeEnvmapReflection();

void main()
{
    if(outputID == 0)
    {
        gl_FragColor = vec4(shadeDiffuseFromEye(), 1.0);
        return;
    }
    if(outputID == 1)
    {
        gl_FragColor = vec4(shadePhong(vec3(10, 10, 10)), 1.0);
        return;
    }
    if(outputID == 2)
    {
        gl_FragColor = vec4(shadeEnvmapReflection(), 1.0);
        return;
    }
    if(outputID == 3)
    {
        // Do something interesting here for extra credit.
        // gl_FragColor = vec4(???, 1.0);
        // return;
    }
    // ...
}

vec3 shadeDiffuseFromEye()
{
    vec3 n = normalize(normal);
    vec3 out_vec = normalize(eyePos - vertex);
    float diffuse = abs(dot(out_vec, n));
    return vec3(diffuse);
}

vec3 shadePhong(vec3 lightPos)
{   // TODO Part 6.
    // TODO Compute Phong shading here. You can choose any color you like. But please
    // TODO make sure that you have noticeable specular highlights in the shading.
    // TODO Variables to use: eyePos, lightPos, normal, vertex
    // Ambient
    vec3 color = vec3(0.5,0.25,0.25);
    float ka = 0.1;
    // Diffuse
    float kd = 0.4;
    vec3 n = normalize(normal);
    vec3 view_vec = normalize(eyePos - vertex);
    vec3 in_vec = normalize(lightPos - vertex);
    float diffuse = kd*abs(dot(in_vec, n));
    // Specular
    float ks = 0.5;
    float p = 16.0;
    vec3 h = normalize(in_vec+view_vec);
    float specular = ks*abs(pow(dot(h,n),p)); //*(I/r^2)
    return (specular+diffuse+ka)*color;
}

vec3 shadeEnvmapReflection()
{   // TODO Part 6.
    // TODO Compute environment mapping based on reflection direction here.
    // TODO First compute the reflection direction using eyePos, normal and vertex.
    // TODO Then convert the reflection direction to spherical coordinates (theta, phi). 
    // TODO Note that the up vector is along +Z axis.
    // TODO Finally, grab the color from envmap using (theta, phi).
    // TODO You will need to use function "vec4 texture2D(sampler2D tex, vec2 uv)" to 
    // TODO get colors from textures. 
    vec3 view_vec = normalize(eyePos - vertex);
    vec3 n = normalize(normal);
    vec3 out_vec = 2.0*dot(view_vec,n)*n-view_vec;
    float x = out_vec[0];
    float y = out_vec[1];
    float z = out_vec[2];
    float radius = sqrt(x*x+y*y+z*z);
    float theta = atan(y,x);
    float phi = acos(z/radius);
    vec2 uv = vec2(theta/(2.0*PI), phi/PI);
    return texture2D(envmap, uv).rgb;
    return vec3(0.5);
}
